<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>ambiso&#x27;s blog - crypto</title>
    <subtitle>excursions into security, cryptography and math</subtitle>
    <link rel="self" type="application/atom+xml" href="https://ambiso.github.io/categories/crypto/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://ambiso.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-02-28T00:00:00+00:00</updated>
    <id>https://ambiso.github.io/categories/crypto/atom.xml</id>
    <entry xml:lang="en">
        <title>Bitwarden PINs can be brute-forced</title>
        <published>2023-02-28T00:00:00+00:00</published>
        <updated>2023-02-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ambiso.github.io/bitwarden-pin/"/>
        <id>https://ambiso.github.io/bitwarden-pin/</id>
        
        <content type="html" xml:base="https://ambiso.github.io/bitwarden-pin/">&lt;div style=&quot;margin: 0 1% 0 1%; border-radius: 10px; border-bottom-left-radius: 0; border-bottom-right-radius: 0; background-color: #3f3f9f; color: white; padding: 0.5em 0.5em 0.25em; font-weight: bold;&quot;&gt;Addressing Misconceptions&lt;&#x2F;div&gt;
&lt;div style=&quot;margin: 0 1% 1em 1%; border-radius: 10px; border-top-left-radius: 0; border-top-right-radius: 0; background-color: #111; padding: 0.25em 0.5em 0.5em;&quot;&gt;
&gt; Obviously a PIN is brute-forceable
&lt;p&gt;No, it&#x27;s not obvious: there&#x27;s several secure implementation options that prevent a brute-force attack in the device-local data access scenario. See &lt;a href=&quot;#mitigation-and-remediation&quot;&gt;Mitigation and Remediation&lt;&#x2F;a&gt; options 2 and 3.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I might as well install a keylogger&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is a different attack scenario. If I throw away my computer, or you steal it in its powered off state, a keylogger won&#x27;t help you since I won&#x27;t be entering my password again.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div style=&quot;margin: 0 1% 0 1%; border-radius: 10px; border-bottom-left-radius: 0; border-bottom-right-radius: 0; background-color: #9f3f3f; color: white; padding: 0.5em 0.5em 0.25em; font-weight: bold;&quot;&gt;Update&lt;&#x2F;div&gt;
&lt;div style=&quot;margin: 0 1% 1em 1%; border-radius: 10px; border-top-left-radius: 0; border-top-right-radius: 0; background-color: #111; padding: 0.25em 0.5em 0.5em;&quot;&gt;
Since the writing of this post Bitwarden has updated their &lt;a href=&quot;https:&#x2F;&#x2F;bitwarden.com&#x2F;help&#x2F;unlock-with-pin&#x2F;&quot;&gt;documentation about the PIN feature&lt;&#x2F;a&gt;:
&lt;p&gt;It now warns rather prominently:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using a PIN can weaken the level of encryption that protects your application&#x27;s local vault database. If you are worried about attack vectors that involve your device&#x27;s local data being compromised, you may want to reconsider the convenience of using a PIN.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You can view the previous versions &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20230124121851&#x2F;https:&#x2F;&#x2F;bitwarden.com&#x2F;help&#x2F;unlock-with-pin&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;. The warning seems to exist since September 2022, but back then it was buried at the very bottom of the page.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately I could not find any changes to the client (as of 2023-03-19), that would warn a user about this (with e.g. a modal warning), as they&#x27;re setting the feature up. Maybe I should just submit a PR myself.&lt;&#x2F;p&gt;
&lt;p&gt;I also don&#x27;t know if any of this applies to the Windows or MacOS clients, you may test it for yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Also don&#x27;t freak out about this too much. As far as I can tell &lt;b&gt;Bitwarden is a good password manager&lt;&#x2F;b&gt;, and you should definitely continue to use it. (Though maybe reconsider whether you want to use the PIN feature if you have it enabled as in the configuration below. (e.g. ensure you have full-disk encryption)) I just wish they&#x27;d warn about the risks of using the PIN feature more clearly.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div style=&quot;margin: 0 1% 0 1%; border-radius: 10px; border-bottom-left-radius: 0; border-bottom-right-radius: 0; background-color: #3f3f3f; color: white; padding: 0.5em 0.5em 0.25em; font-weight: bold;&quot;&gt;Abstract&lt;&#x2F;div&gt;
&lt;div style=&quot;margin: 0 1% 1em 1%; border-radius: 10px; border-top-left-radius: 0; border-top-right-radius: 0; background-color: #111; padding: 0.25em 0.5em 0.5em;&quot;&gt;
If an attacker can get access to the encrypted vault data stored locally on your device,
and you&#x27;ve configured a Bitwarden PIN as in the image below, the attacker can brute-force the PIN and gain access to your vault&#x27;s master key.
&lt;p&gt;Effectively, Bitwarden may just as well store the data in plain text on disk.&lt;&#x2F;p&gt;
&lt;p&gt;Bitwarden clients do not warn about this risk.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The Bitwarden desktop client and browser extensions allow the user to unlock Bitwarden with a PIN.
This PIN can be set-up per device after logging in to an account using the master password.
All information pertaining to the PIN is stored locally on the device.
It cannot be used to sign in to an account (read: authenticate with the Bitwarden backend server), but it can be used to obtain access to the vault data, that has been synced and stored locally in encrypted form.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s now assume that the user enables the PIN unlock and configures Bitwarden so that it doesn&#x27;t require the master password on restart.&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; width: 100%; justify-content: space-around;&quot;&gt;
&lt;img src=&quot;pin_config.webp&quot; alt=&quot;PIN Config Window with a low-entropy PIN entered into the PIN field and the &#x27;Lock with master password on restart&#x27; option unchecked&quot; style=&quot;width: 20em; margin-top: 1em; margin-bottom: 1em;&quot;&#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Then a secret derived only from the user&#x27;s email and PIN will be used to encrypt the master vault key.
It stores roughly&lt;&#x2F;p&gt;
&lt;p&gt;\[c = \mathrm{Encrypt}_{\mathcal{K}(\mathrm{email},\ \mathrm{PIN})}(\text{master key})\]&lt;&#x2F;p&gt;
&lt;p&gt;on disk, where \(\mathcal{K}\) is a key derivation function.
This means if an attacker can at any point gain access to the encrypted vault data stored on the device the attacker can brute-force the PIN:
the attacker can check whether decryption of \(c\) succeeds using the guessed PIN.
This brute-force will very likely be successful, since PINs are usually very low-entropy.
Now, granted, the key derivation function is PBKDF2 with 100000 iterations (+ HKDF), but that won&#x27;t help with a 4 digit pin.&lt;&#x2F;p&gt;
&lt;p&gt;Bitwarden seems to be aware that PINs are low-entropy and that many PIN guesses are a problem: the client allows only 5 PIN unlock attempts.
However this 5 guesses limit is enforced completely within the client&#x27;s logic: it relies on the attacker using the official Bitwarden client.
Instead, an attacker can directly attack the ciphertext \(c\) above, trying different PINs until the ciphertext successfully decrypts.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation&lt;&#x2F;h1&gt;
&lt;video width=&quot;100%&quot; controls&gt;
&lt;source src=&quot;exploit_demo.webm&quot; type=&quot;video&#x2F;webm&quot;&gt;
&lt;meta itemprop=&quot;description&quot; content=&quot;Video showing bitwarden. User then sets the pin 2345. The vault is locked and then bitwarden is quit. In the terminal the exploit program is run, which after a short while outputs the PIN 2345.&quot;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;A proof of concept exploit for Linux only can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ambiso&#x2F;bitwarden-pin&quot;&gt;here&lt;&#x2F;a&gt;.
It uses the fact that the encryption is authenticated and checks whether the MAC verifies using the key derived from the guessed PIN.
It only tests the PINs 0000 through 9999, so you will have to use one of those if you want it to succeed.
Make sure to uncheck the &quot;Lock with master password on restart&quot; option (otherwise the required information would need to be read from the Bitwarden application&#x27;s memory (quite a different attack scenario)).&lt;&#x2F;p&gt;
&lt;p&gt;It finds any 4 digit PIN in less than 4 seconds:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ time .&#x2F;target&#x2F;release&#x2F;bitwarden-pin
&lt;&#x2F;span&gt;&lt;span&gt;Testing 4 digit pins from 0000 to 9999
&lt;&#x2F;span&gt;&lt;span&gt;Pin found: 9999
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;bitwarden-pin  81.73s user 0.03s system 2384% cpu 3.429 total
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;bitwarden-s-response&quot;&gt;Bitwarden&#x27;s response&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve reported the issue to Bitwarden previously, however it was marked out of scope as it belongs to one of these categories:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Attacks requiring physical access to a user&#x27;s device&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scenarios that are extremely complex, difficult or unlikely when utilizing already compromised administrative accounts, self-hosted server, networks or physical devices which would render much easier and alternate means of compromising the data contained within Bitwarden&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is however not entirely true: only the device-local encrypted vault data needs to be accessed.
&lt;strong&gt;If accessing device-local data is outside of the threat model, why are we encrypting these data at all? We might as well store them in plain text.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;mitigation-and-remediation&quot;&gt;Mitigation and Remediation&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;1-inform-better-about-the-risk&quot;&gt;1. Inform better about the risk&lt;&#x2F;h2&gt;
&lt;p&gt;The risk of this attack is relatively low (depending on your threat model): the attacker needs to gain access to the encrypted vault data stored on the device, and the user must configure Bitwarden in a specific way for the attack to be possible.
Dumpster diving could give access to these data when the disk has not been erased and no additional measures like full-disk encryption were taken.
However, if someone gains access to the device data (e.g. through coercion) they can start a brute-force attack, and don&#x27;t require you to ever enter the PIN&#x2F;trust the device.&lt;&#x2F;p&gt;
&lt;p&gt;Advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Nothing to implement&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Disadvantage:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;PIN is brute-forceable when device data is obtained&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2-rely-on-a-third-party-to-enforce-an-unlock-attempt-limit&quot;&gt;2. Rely on a third-party to enforce an unlock attempt limit&lt;&#x2F;h2&gt;
&lt;p&gt;Secret-share the master key with a backend that enforces an unlock attempt limit.&lt;&#x2F;p&gt;
&lt;p&gt;Advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to implement&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Disadvantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Client needs to be online&lt;&#x2F;li&gt;
&lt;li&gt;Access to the backend database and device allows immediate decryption (without a brute-force attack), the backend may also be coerced into releasing the ciphertext&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;3-rely-on-some-hardware-security-magic&quot;&gt;3. Rely on some hardware security magic&lt;&#x2F;h2&gt;
&lt;p&gt;Do the above (no. 2) in a Trusted Execution Environment, Intel SGX, TPM or something alike.
Example implementations include &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;security&#x2F;identity-protection&#x2F;hello-for-business&#x2F;hello-why-pin-is-better-than-password&quot;&gt;Windows Hello&lt;&#x2F;a&gt; which Bitwarden also has &lt;a href=&quot;https:&#x2F;&#x2F;bitwarden.com&#x2F;blog&#x2F;introducing-desktop-biometrics&#x2F;&quot;&gt;support for&lt;&#x2F;a&gt; (I have not analyzed this feature at all, however).&lt;&#x2F;p&gt;
&lt;p&gt;Advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Would likely work offline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Disadvantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Not all platforms support hardware security magic&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;final-words&quot;&gt;Final Words&lt;&#x2F;h1&gt;
&lt;p&gt;Using a long passphrase as a PIN in bitwarden is safe today. However, Bitwarden takes little effort in communicating the risks of choosing a short low-entropy PIN.
Currently there is very little information to be found about the PIN in Bitwarden documentation, and it is not mentioned in the Security Whitepaper.
A motivated attacker (e.g. a dumpster diver) can recover entire Bitwarden vaults today, unless additional measures like full-disk encryption were taken.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sources&quot;&gt;Sources&lt;&#x2F;h1&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>CSCG2021 Secure Bank (writeup)</title>
        <published>2021-06-06T00:00:00+00:00</published>
        <updated>2021-06-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ambiso.github.io/cscg-2021-secure-bank/"/>
        <id>https://ambiso.github.io/cscg-2021-secure-bank/</id>
        
        <content type="html" xml:base="https://ambiso.github.io/cscg-2021-secure-bank/">&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;earth.cscg.live&#x2F;tasks&#x2F;secure-bank&quot;&gt;&quot;Secure Bank&quot;&lt;&#x2F;a&gt; challenge of the Cyber Security Challenge Germany (CSCG) 2021
we are presented with a protocol that is meant to ensure that
we can only login if we know a certain PIN.&lt;&#x2F;p&gt;
&lt;p&gt;In a real world application this PIN could be generated as in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Time-based_One-Time_Password&quot;&gt;TOTP&lt;&#x2F;a&gt;s that are used for 2 factor authentication.
In the challenge the PIN is simply generated randomly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;challenge = os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;urandom&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hex&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;msg = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Challenge: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + challenge
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pin = rng.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;randint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9999&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Random PIN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run_protocol&lt;&#x2F;span&gt;&lt;span&gt;(pin, msg)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The protocol that the server runs is executed with a message and a PIN.
The protocol resembles a password based authenticated key exchange (PAKE)
since a shared secret that is bound to the PIN is obtained.
Normally, we would have to know the PIN to compute the shared secret.
However, a flaw lets us guess and check every possible PIN.
The shared secret is then used to encrypt the challenge message,
and the resulting ciphertext is sent to the client.
The client is supposed to send back the challenge.
In short: if we can obtain the random challenge from a run of the protocol we win✨.&lt;&#x2F;p&gt;
&lt;p&gt;The challenge description also advises us not to try an online brute-force attack.
To enforce this we actually have to recover the challenge twice from two consecutive protocol runs,
where each has a randomly chosen PIN.
That&#x27;s \(10000^2 = 100\) million possible combinations!
Assuming 30 online guesses per second it would take 38.58 days to perform this many guesses.
Even with 100 million guesses we only have a
probability of success of \(1-(1-\frac{1}{10000^2})^{10^8}\approx 0.63 = 63\%\).
Therefore it seems much more economical (and fun!) to actually try and break the challenge.&lt;&#x2F;p&gt;
&lt;p&gt;The protocol makes use of DH parameters from &lt;a href=&quot;https:&#x2F;&#x2F;www.ietf.org&#x2F;rfc&#x2F;rfc3526.txt&quot;&gt;RFC 3526&lt;&#x2F;a&gt;
using a generator \(g=2\) and computes everything modulo some large prime.&lt;&#x2F;p&gt;
&lt;p&gt;The protocol asks for three values from the client:
The first two are an email address (that is used as a user ID) and a public parameter
that is presumably generated by the generator \(g\).&lt;&#x2F;p&gt;
&lt;p&gt;The client performs the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;generate a &lt;code&gt;user_id&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;generate a secret \(x_a \in \mathbb{Z}_p\) where \(p\) is the large known prime&lt;&#x2F;li&gt;
&lt;li&gt;compute the public parameter \(c_{\mathrm{pub}} = g^{x_a}\)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;user_id&lt;&#x2F;code&gt; and the public parameter \(c_{\mathrm{pub}}\) are sent to the server.&lt;&#x2F;p&gt;
&lt;p&gt;The server then computes a bunch of values.
You can skip over them, but here they are for completeness sake:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;\(\mathrm{id}_a = g^{H(\mathrm{user\_id})}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(m_c = \mathrm{id}_a^{-\mathrm{pin}}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(t_a = c_{\mathrm{pub}} \cdot m_c\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(m_s = \mathrm{id}_b^{\mathrm{pin}}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;sample a random \(r_b \in \mathbb{Z}_p\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(t_b = g^{r_b}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(s_{\mathrm{pub}} = t_b \cdot m_s\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The shared secret is computed as:&lt;&#x2F;p&gt;
&lt;p&gt;$$z = t_a^{r_b}$$&lt;&#x2F;p&gt;
&lt;p&gt;However, \(z\) alone is not sufficient:
the key is computed as the hash of all values that occurred in the protocol run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;### Calculate shared secret
&lt;&#x2F;span&gt;&lt;span&gt;z = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dh_exchange&lt;&#x2F;span&gt;&lt;span&gt;(t_a, r_b)
&lt;&#x2F;span&gt;&lt;span&gt;key = SHA256.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(id_a) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID_SERVER&lt;&#x2F;span&gt;&lt;span&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(user_pub) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(server_pub) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(pin) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(z)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Luckily, we already know &lt;code&gt;id_a&lt;&#x2F;code&gt;, &lt;code&gt;ID_SERVER&lt;&#x2F;code&gt;, &lt;code&gt;user_pub&lt;&#x2F;code&gt; (=\(c_{\mathrm{pub}}\)), &lt;code&gt;server_pub&lt;&#x2F;code&gt; (=\(s_{\mathrm{pub}}\)).
The only values that are missing are &lt;code&gt;pin&lt;&#x2F;code&gt; and &lt;code&gt;z&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A major flaw that lets us abuse this protocol is
that we know the discrete logarithm of the server&#x27;s public
parameter from the implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID_SERVER &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dh_genpub&lt;&#x2F;span&gt;&lt;span&gt;(int.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;big&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The discrete logarithm is simply &lt;code&gt;int.from_bytes(b&#x27;server&#x27;, &#x27;big&#x27;)&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Using this information we can perform an offline brute force attack on the PIN
by computing a candidate \(g^{\hat{r}_b}\) as:&lt;&#x2F;p&gt;
&lt;p&gt;\(g^{\hat{r}_{b}} = s_{\mathrm{pub}} &#x2F; g^{x_b \cdot \mathrm{pin}}\)&lt;&#x2F;p&gt;
&lt;p&gt;We can compute this value because \(x_b\), the server&#x27;s private part was made public.
The above formula follows from the last computation in the server:&lt;&#x2F;p&gt;
&lt;p&gt;$$\begin{aligned}
s_\mathit{pub}&amp;amp;=t_b \cdot m_s \\
&amp;amp;=g^{r_b} \cdot {\left(g^{x_b}\right)}^{\mathrm{pin}}
\end{aligned}$$&lt;&#x2F;p&gt;
&lt;p&gt;By guessing the PIN we obtain a candidate \(g^{\hat{r}_{b}}\).
We can then compute a candidate \(\hat{z}\) as:&lt;&#x2F;p&gt;
&lt;p&gt;$$\hat{z} = {\left(g^{\hat{r}_{b}}\right)}^{x_a - \mathrm{pin} \cdot H(\mathrm{user\_id})}.$$&lt;&#x2F;p&gt;
&lt;p&gt;Using this candidate \(\hat{z}\) and the guessed PIN
we can derive a symmetric key to decrypt the received ciphertext.
We can check whether the key is correct by comparing the decrypted text
against the known plaintext prefix &quot;Challenge: &quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Voilà! Now we need 5000 &lt;em&gt;offline&lt;&#x2F;em&gt; guesses in expectation to recover the correct PIN!
Therefore this completely breaks the security of the protocol:
a PAKE should prevent an adversary from guessing offline.&lt;&#x2F;p&gt;
&lt;p&gt;The flaw we discovered is analogous to one that can occur &quot;in the real world&quot; with SPAKE2
and the challenge description hints at this: &quot;The &lt;strong&gt;SP&lt;&#x2F;strong&gt; b&lt;strong&gt;A&lt;&#x2F;strong&gt;n&lt;strong&gt;K&lt;&#x2F;strong&gt; &lt;strong&gt;E2&lt;&#x2F;strong&gt; introduced a new protocol [...]&quot;.
I&#x27;ve also found a blog post detailing this issue &lt;a href=&quot;https:&#x2F;&#x2F;www.lothar.com&#x2F;blog&#x2F;54-spake2-random-elements&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.
It also describes how one could pick arbitrary public parameters for which nobody knows the discrete logarithm.
This is possible, since the server never actually uses the discrete log in the protocol.
Therefore it is sufficient to have a single public value that everyone trusts - but nobody has its discrete log.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;full-exploit&quot;&gt;Full Exploit&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;Crypto.Hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SHA256
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;gmpy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;powmod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;pwnlib
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;s = pwnlib.tubes.process.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ncat --ssl xxx-secure-bank.challenge.broker.cscg.live 31337&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;user_id = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Some ID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;email_hash = SHA256.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(user_id.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;email_num = int.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(email_hash, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;big&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#user_pub = pow(email_num, -1, server.PRIME)
&lt;&#x2F;span&gt;&lt;span&gt;user_x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1337
&lt;&#x2F;span&gt;&lt;span&gt;user_pub = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;powmod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GEN&lt;&#x2F;span&gt;&lt;span&gt;, user_x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;id_a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;powmod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GEN&lt;&#x2F;span&gt;&lt;span&gt;, email_num, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;server_x = int.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;big&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;break_pin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;server_pub&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;known_plaintext&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;pin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(pin)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Compute candidate g_rb
&lt;&#x2F;span&gt;&lt;span&gt;        g_rb = (server_pub * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;powmod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;powmod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GEN&lt;&#x2F;span&gt;&lt;span&gt;, server_x * pin, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME&lt;&#x2F;span&gt;&lt;span&gt;), -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME&lt;&#x2F;span&gt;&lt;span&gt;)) % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Compute candidate z
&lt;&#x2F;span&gt;&lt;span&gt;        z = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;powmod&lt;&#x2F;span&gt;&lt;span&gt;(g_rb, user_x + -pin * email_num, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        key = SHA256.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(id_a) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID_SERVER&lt;&#x2F;span&gt;&lt;span&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(user_pub) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(server_pub) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(pin) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(z)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Test pin against known plaintext
&lt;&#x2F;span&gt;&lt;span&gt;        aes = AES.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AES&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MODE_ECB&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        dec = aes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decrypt&lt;&#x2F;span&gt;&lt;span&gt;(enc)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;known_plaintext in dec:
&lt;&#x2F;span&gt;&lt;span&gt;            dec = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(Padding.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unpad&lt;&#x2F;span&gt;&lt;span&gt;(dec, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;), &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Decrypted: &lt;&#x2F;span&gt;&lt;span&gt;{dec}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            challenge = dec[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(known_plaintext):]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;challenge
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PIN not found&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_break&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;known_plaintext&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{user_id}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{user_pub}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recvline&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    server_pub = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recvline&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;()[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    enc = bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fromhex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recvline&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;()[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;], &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;break_pin&lt;&#x2F;span&gt;&lt;span&gt;(server_pub, enc, known_plaintext)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;do_break&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Challenge: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;do_break&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CSCG{&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;see-also&quot;&gt;See Also&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lothar.com&#x2F;blog&#x2F;54-spake2-random-elements&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.lothar.com&#x2F;blog&#x2F;54-spake2-random-elements&#x2F;&lt;&#x2F;a&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20210226042526&#x2F;https:&#x2F;&#x2F;www.lothar.com&#x2F;blog&#x2F;54-spake2-random-elements&#x2F;&quot;&gt;archived&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Hedged Fiat-Shamir Signatures (slides)</title>
        <published>2020-05-06T00:00:00+00:00</published>
        <updated>2020-05-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ambiso.github.io/hedged-fiat-shamir/"/>
        <id>https://ambiso.github.io/hedged-fiat-shamir/</id>
        
        <content type="html" xml:base="https://ambiso.github.io/hedged-fiat-shamir/">&lt;iframe src=&quot;.&#x2F;tud-2020-hedged-fiat-shamir.pdf&quot; style=&quot;width: 100%; aspect-ratio: 16&#x2F;9;&quot;&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>CBC Padding Oracle Attack (slides)</title>
        <published>2018-10-22T00:00:00+00:00</published>
        <updated>2018-10-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://ambiso.github.io/cbc-padding-oracle-challenge/"/>
        <id>https://ambiso.github.io/cbc-padding-oracle-challenge/</id>
        
        <content type="html" xml:base="https://ambiso.github.io/cbc-padding-oracle-challenge/">&lt;iframe src=&quot;.&#x2F;meepwnctf-2018-esor.pdf&quot; style=&quot;width: 100%; aspect-ratio: 16&#x2F;9;&quot;&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry>
</feed>
