<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>ambiso&#x27;s blog - misc</title>
      <link>https://ambiso.github.io</link>
      <description>excursions into security, cryptography and math</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://ambiso.github.io/categories/misc/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Tue, 10 Dec 2024 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Streaming audio over the network with pactl</title>
          <pubDate>Tue, 10 Dec 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ambiso.github.io/pactl-remote-tcp-audio/</link>
          <guid>https://ambiso.github.io/pactl-remote-tcp-audio/</guid>
          <description xml:base="https://ambiso.github.io/pactl-remote-tcp-audio/">&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# On the receiving end:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pactl&lt;&#x2F;span&gt;&lt;span&gt; load-module module-native-protocol-tcp-new port=4656 listen=&amp;lt;local server IP&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# On the sending end:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pactl&lt;&#x2F;span&gt;&lt;span&gt; load-module module-native-protocol-tcp-new sink=&amp;lt;local server IP&amp;gt;:4656
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# To finish:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pactl&lt;&#x2F;span&gt;&lt;span&gt; unload-module module-native-protocol-tcp-new
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>systemd-resolved takes 10 seconds to resolve with DNS over TLS (DoT)</title>
          <pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ambiso.github.io/disable-isp-dns/</link>
          <guid>https://ambiso.github.io/disable-isp-dns/</guid>
          <description xml:base="https://ambiso.github.io/disable-isp-dns/">&lt;p&gt;If you&#x27;re using &lt;code&gt;DnsOverTLS=yes&lt;&#x2F;code&gt; in your &lt;code&gt;resolved.conf&lt;&#x2F;code&gt; and some applications need 10 seconds to resolve something - try disabling your router&#x27;s DNS servers:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[DHCP]
&lt;&#x2F;span&gt;&lt;span&gt;UseDNS=false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[IPv6AcceptRA]
&lt;&#x2F;span&gt;&lt;span&gt;UseDNS=false
&lt;&#x2F;span&gt;&lt;span&gt;DHCPv6Client=false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;systemd-resolved&lt;&#x2F;code&gt; always tries to contact the IPv6 DNS server of my ISP&#x27;s router on port 853 - but it doesn&#x27;t respond at all (not even a &lt;code&gt;RST&lt;&#x2F;code&gt;), which is why it retransmitted the SYN several times until it gave up after 10 seconds and switched to one of the configured global DNS resolvers.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Z-Order Curve Visualization</title>
          <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ambiso.github.io/z-order-curve/</link>
          <guid>https://ambiso.github.io/z-order-curve/</guid>
          <description xml:base="https://ambiso.github.io/z-order-curve/">&lt;p&gt;A visualization of a 3D &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Z-order_curve&quot;&gt;Z-order curve&lt;&#x2F;a&gt;.
Doesn&#x27;t really work on mobile - use the mouse to rotate the view.&lt;&#x2F;p&gt;
&lt;p&gt;A friend of mine asked me about optimizing matrix multiplication.
One way to obtain better cache locality is to use space filling curves.&lt;&#x2F;p&gt;
&lt;iframe src=&quot;zoc.html&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;
&lt;&#x2F;iframe&gt;
&lt;p&gt;I made this visualization using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JuliaPlots&#x2F;WGLMakie.jl&quot;&gt;WGLMakie&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SimonDanisch&#x2F;JSServe.jl&quot;&gt;JSServe.jl&lt;&#x2F;a&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&#x2F;&quot;&gt;Julia&lt;&#x2F;a&gt;.
We can convert between points in \(\{0,\ldots,2^{3 \cdot n}-1\}\) and \(\left(\{0,\ldots,2^n-1\}\right)^3\) by interleaving the bits.
This is described in more detail on the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Z-order_curve#Coordinate_values&quot;&gt;Wikipedia&lt;&#x2F;a&gt; page.
The &lt;code&gt;zoc2p&lt;&#x2F;code&gt; function implements this mapping.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-julia &quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zoc2p&lt;&#x2F;span&gt;&lt;span&gt;(zoc, digits_per_coordinate, dim)
&lt;&#x2F;span&gt;&lt;span&gt;    p = digits(zoc, base=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, pad=dim * digits_per_coordinate)
&lt;&#x2F;span&gt;&lt;span&gt;    mapslices(reshape(p, :, digits_per_coordinate); dims=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span&gt; x
&lt;&#x2F;span&gt;&lt;span&gt;        sum(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;^(i-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) * x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i,x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; enumerate(x))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;dim&lt;&#x2F;code&gt; is the number of dimensions of the z-order curve and &lt;code&gt;digits_per_coordinate&lt;&#x2F;code&gt; corresponds to \(n\).
We then enumerate all points in \(\{0,\ldots,2^{3 \cdot n}-1\}\) and send them through the function to obtain the corresponding point in 3D space:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-julia &quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span&gt;v = vcat([zoc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;p(i, digits_per_coordinate, dim)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;^(digits_per_coordinate*dim)-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]...)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s the full plotting function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;julia&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-julia &quot;&gt;&lt;code class=&quot;language-julia&quot; data-lang=&quot;julia&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;plt&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    set_theme!(resolution=(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;800&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;800&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    app = App() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span&gt; s::Session
&lt;&#x2F;span&gt;&lt;span&gt;        digits_per_coordinate = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;        dim = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;        v = vcat([zoc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;p(i, digits_per_coordinate, dim)&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;^(digits_per_coordinate*dim)-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]...)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        xs = v[:, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        ys = v[:, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        zs = v[:, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        progress = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:length(xs)-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&#x2F;(length(xs)-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        fig, ax, splot = lines(xs, ys, zs, linewidth=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;, color=progress, colormap=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:rainbow&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        DOM.div(fig)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    page = Page(offline=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, exportable=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    page_html = sprint() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span&gt; io
&lt;&#x2F;span&gt;&lt;span&gt;        show(io, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MIME&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;(), page)
&lt;&#x2F;span&gt;&lt;span&gt;        show(io, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;MIME&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;(), app)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    write(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;export&#x2F;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, page_html)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;JSServe&lt;&#x2F;code&gt; then allows us to export the plot as a static webpage, and it&#x27;s the one you see above embedded as an &lt;code&gt;iframe&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
