<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>ambiso&#x27;s blog - writeup</title>
      <link>https://ambiso.github.io</link>
      <description>excursions into security, cryptography and math</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://ambiso.github.io/categories/writeup/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Sun, 06 Jun 2021 00:00:00 +0000</lastBuildDate>
      <item>
          <title>CSCG2021 Secure Bank (writeup)</title>
          <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ambiso.github.io/cscg-2021-secure-bank/</link>
          <guid>https://ambiso.github.io/cscg-2021-secure-bank/</guid>
          <description xml:base="https://ambiso.github.io/cscg-2021-secure-bank/">&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;earth.cscg.live&#x2F;tasks&#x2F;secure-bank&quot;&gt;&quot;Secure Bank&quot;&lt;&#x2F;a&gt; challenge of the Cyber Security Challenge Germany (CSCG) 2021
we are presented with a protocol that is meant to ensure that
we can only login if we know a certain PIN.&lt;&#x2F;p&gt;
&lt;p&gt;In a real world application this PIN could be generated as in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Time-based_One-Time_Password&quot;&gt;TOTP&lt;&#x2F;a&gt;s that are used for 2 factor authentication.
In the challenge the PIN is simply generated randomly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;challenge = os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;urandom&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hex&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;msg = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Challenge: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + challenge
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pin = rng.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;randint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9999&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Random PIN
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run_protocol&lt;&#x2F;span&gt;&lt;span&gt;(pin, msg)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The protocol that the server runs is executed with a message and a PIN.
The protocol resembles a password based authenticated key exchange (PAKE)
since a shared secret that is bound to the PIN is obtained.
Normally, we would have to know the PIN to compute the shared secret.
However, a flaw lets us guess and check every possible PIN.
The shared secret is then used to encrypt the challenge message,
and the resulting ciphertext is sent to the client.
The client is supposed to send back the challenge.
In short: if we can obtain the random challenge from a run of the protocol we winâœ¨.&lt;&#x2F;p&gt;
&lt;p&gt;The challenge description also advises us not to try an online brute-force attack.
To enforce this we actually have to recover the challenge twice from two consecutive protocol runs,
where each has a randomly chosen PIN.
That&#x27;s \(10000^2 = 100\) million possible combinations!
Assuming 30 online guesses per second it would take 38.58 days to perform this many guesses.
Even with 100 million guesses we only have a
probability of success of \(1-(1-\frac{1}{10000^2})^{10^8}\approx 0.63 = 63\%\).
Therefore it seems much more economical (and fun!) to actually try and break the challenge.&lt;&#x2F;p&gt;
&lt;p&gt;The protocol makes use of DH parameters from &lt;a href=&quot;https:&#x2F;&#x2F;www.ietf.org&#x2F;rfc&#x2F;rfc3526.txt&quot;&gt;RFC 3526&lt;&#x2F;a&gt;
using a generator \(g=2\) and computes everything modulo some large prime.&lt;&#x2F;p&gt;
&lt;p&gt;The protocol asks for three values from the client:
The first two are an email address (that is used as a user ID) and a public parameter
that is presumably generated by the generator \(g\).&lt;&#x2F;p&gt;
&lt;p&gt;The client performs the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;generate a &lt;code&gt;user_id&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;generate a secret \(x_a \in \mathbb{Z}_p\) where \(p\) is the large known prime&lt;&#x2F;li&gt;
&lt;li&gt;compute the public parameter \(c_{\mathrm{pub}} = g^{x_a}\)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;user_id&lt;&#x2F;code&gt; and the public parameter \(c_{\mathrm{pub}}\) are sent to the server.&lt;&#x2F;p&gt;
&lt;p&gt;The server then computes a bunch of values.
You can skip over them, but here they are for completeness sake:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;\(\mathrm{id}_a = g^{H(\mathrm{user\_id})}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(m_c = \mathrm{id}_a^{-\mathrm{pin}}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(t_a = c_{\mathrm{pub}} \cdot m_c\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(m_s = \mathrm{id}_b^{\mathrm{pin}}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;sample a random \(r_b \in \mathbb{Z}_p\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(t_b = g^{r_b}\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;\(s_{\mathrm{pub}} = t_b \cdot m_s\)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The shared secret is computed as:&lt;&#x2F;p&gt;
&lt;p&gt;$$z = t_a^{r_b}$$&lt;&#x2F;p&gt;
&lt;p&gt;However, \(z\) alone is not sufficient:
the key is computed as the hash of all values that occurred in the protocol run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;### Calculate shared secret
&lt;&#x2F;span&gt;&lt;span&gt;z = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dh_exchange&lt;&#x2F;span&gt;&lt;span&gt;(t_a, r_b)
&lt;&#x2F;span&gt;&lt;span&gt;key = SHA256.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(id_a) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID_SERVER&lt;&#x2F;span&gt;&lt;span&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(user_pub) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(server_pub) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(pin) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(z)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Luckily, we already know &lt;code&gt;id_a&lt;&#x2F;code&gt;, &lt;code&gt;ID_SERVER&lt;&#x2F;code&gt;, &lt;code&gt;user_pub&lt;&#x2F;code&gt; (=\(c_{\mathrm{pub}}\)), &lt;code&gt;server_pub&lt;&#x2F;code&gt; (=\(s_{\mathrm{pub}}\)).
The only values that are missing are &lt;code&gt;pin&lt;&#x2F;code&gt; and &lt;code&gt;z&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A major flaw that lets us abuse this protocol is
that we know the discrete logarithm of the server&#x27;s public
parameter from the implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID_SERVER &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dh_genpub&lt;&#x2F;span&gt;&lt;span&gt;(int.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;big&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The discrete logarithm is simply &lt;code&gt;int.from_bytes(b&#x27;server&#x27;, &#x27;big&#x27;)&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Using this information we can perform an offline brute force attack on the PIN
by computing a candidate \(g^{\hat{r}_b}\) as:&lt;&#x2F;p&gt;
&lt;p&gt;\(g^{\hat{r}_{b}} = s_{\mathrm{pub}} &#x2F; g^{x_b \cdot \mathrm{pin}}\)&lt;&#x2F;p&gt;
&lt;p&gt;We can compute this value because \(x_b\), the server&#x27;s private part was made public.
The above formula follows from the last computation in the server:&lt;&#x2F;p&gt;
&lt;p&gt;$$\begin{aligned}
s_\mathit{pub}&amp;amp;=t_b \cdot m_s \\
&amp;amp;=g^{r_b} \cdot {\left(g^{x_b}\right)}^{\mathrm{pin}}
\end{aligned}$$&lt;&#x2F;p&gt;
&lt;p&gt;By guessing the PIN we obtain a candidate \(g^{\hat{r}_{b}}\).
We can then compute a candidate \(\hat{z}\) as:&lt;&#x2F;p&gt;
&lt;p&gt;$$\hat{z} = {\left(g^{\hat{r}_{b}}\right)}^{x_a - \mathrm{pin} \cdot H(\mathrm{user\_id})}.$$&lt;&#x2F;p&gt;
&lt;p&gt;Using this candidate \(\hat{z}\) and the guessed PIN
we can derive a symmetric key to decrypt the received ciphertext.
We can check whether the key is correct by comparing the decrypted text
against the known plaintext prefix &quot;Challenge: &quot;.&lt;&#x2F;p&gt;
&lt;p&gt;VoilÃ ! Now we need 5000 &lt;em&gt;offline&lt;&#x2F;em&gt; guesses in expectation to recover the correct PIN!
Therefore this completely breaks the security of the protocol:
a PAKE should prevent an adversary from guessing offline.&lt;&#x2F;p&gt;
&lt;p&gt;The flaw we discovered is analogous to one that can occur &quot;in the real world&quot; with SPAKE2
and the challenge description hints at this: &quot;The &lt;strong&gt;SP&lt;&#x2F;strong&gt; b&lt;strong&gt;A&lt;&#x2F;strong&gt;n&lt;strong&gt;K&lt;&#x2F;strong&gt; &lt;strong&gt;E2&lt;&#x2F;strong&gt; introduced a new protocol [...]&quot;.
I&#x27;ve also found a blog post detailing this issue &lt;a href=&quot;https:&#x2F;&#x2F;www.lothar.com&#x2F;blog&#x2F;54-spake2-random-elements&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.
It also describes how one could pick arbitrary public parameters for which nobody knows the discrete logarithm.
This is possible, since the server never actually uses the discrete log in the protocol.
Therefore it is sufficient to have a single public value that everyone trusts - but nobody has its discrete log.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;full-exploit&quot;&gt;Full Exploit&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;Crypto.Hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SHA256
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;gmpy2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;powmod
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;pwnlib
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;s = pwnlib.tubes.process.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ncat --ssl xxx-secure-bank.challenge.broker.cscg.live 31337&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;user_id = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Some ID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;email_hash = SHA256.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(user_id.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;email_num = int.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(email_hash, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;big&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#user_pub = pow(email_num, -1, server.PRIME)
&lt;&#x2F;span&gt;&lt;span&gt;user_x = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1337
&lt;&#x2F;span&gt;&lt;span&gt;user_pub = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;powmod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GEN&lt;&#x2F;span&gt;&lt;span&gt;, user_x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;id_a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;powmod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GEN&lt;&#x2F;span&gt;&lt;span&gt;, email_num, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;server_x = int.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;from_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;big&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;break_pin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;server_pub&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;known_plaintext&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;pin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(pin)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Compute candidate g_rb
&lt;&#x2F;span&gt;&lt;span&gt;        g_rb = (server_pub * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;powmod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;powmod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GEN&lt;&#x2F;span&gt;&lt;span&gt;, server_x * pin, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME&lt;&#x2F;span&gt;&lt;span&gt;), -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME&lt;&#x2F;span&gt;&lt;span&gt;)) % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Compute candidate z
&lt;&#x2F;span&gt;&lt;span&gt;        z = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;powmod&lt;&#x2F;span&gt;&lt;span&gt;(g_rb, user_x + -pin * email_num, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PRIME&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        key = SHA256.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(id_a) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ID_SERVER&lt;&#x2F;span&gt;&lt;span&gt;) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(user_pub) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(server_pub) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(pin) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;long_to_bytes&lt;&#x2F;span&gt;&lt;span&gt;(z)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Test pin against known plaintext
&lt;&#x2F;span&gt;&lt;span&gt;        aes = AES.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AES&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MODE_ECB&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        dec = aes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decrypt&lt;&#x2F;span&gt;&lt;span&gt;(enc)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;known_plaintext in dec:
&lt;&#x2F;span&gt;&lt;span&gt;            dec = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(Padding.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unpad&lt;&#x2F;span&gt;&lt;span&gt;(dec, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;), &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Decrypted: &lt;&#x2F;span&gt;&lt;span&gt;{dec}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            challenge = dec[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(known_plaintext):]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;challenge
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PIN not found&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_break&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;known_plaintext&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{user_id}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{user_pub}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recvline&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    server_pub = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recvline&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;()[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    enc = bytes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fromhex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recvline&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;()[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;], &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;break_pin&lt;&#x2F;span&gt;&lt;span&gt;(server_pub, enc, known_plaintext)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;do_break&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Challenge: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;do_break&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CSCG{&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;see-also&quot;&gt;See Also&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lothar.com&#x2F;blog&#x2F;54-spake2-random-elements&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.lothar.com&#x2F;blog&#x2F;54-spake2-random-elements&#x2F;&lt;&#x2F;a&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20210226042526&#x2F;https:&#x2F;&#x2F;www.lothar.com&#x2F;blog&#x2F;54-spake2-random-elements&#x2F;&quot;&gt;archived&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>CBC Padding Oracle Attack (slides)</title>
          <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ambiso.github.io/cbc-padding-oracle-challenge/</link>
          <guid>https://ambiso.github.io/cbc-padding-oracle-challenge/</guid>
          <description xml:base="https://ambiso.github.io/cbc-padding-oracle-challenge/">&lt;iframe src=&quot;.&#x2F;meepwnctf-2018-esor.pdf&quot; style=&quot;width: 100%; aspect-ratio: 16&#x2F;9;&quot;&gt;&lt;&#x2F;iframe&gt;
</description>
      </item>
      <item>
          <title>Generating Adversarial Examples - Challenge Writeup (slides)</title>
          <pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ambiso.github.io/adversarial-machine-learning-challenge/</link>
          <guid>https://ambiso.github.io/adversarial-machine-learning-challenge/</guid>
          <description xml:base="https://ambiso.github.io/adversarial-machine-learning-challenge/">&lt;p&gt;&quot;Jodlgang&quot; is a challenge at the 2018 FAUST CTF.&lt;&#x2F;p&gt;
&lt;p&gt;From the challenge description:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Jodlgang platfrom replaced the old password login for a state-of-the-art face authentication system. To sign in, a patron must provide an image of his face alongside his email address. The face snap must be a color image of size 224x224 pixels and must not be larger than 1MB.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Luckily we are given the neural network architecture and its weight that are used to recognize faces.
This means we can use backpropagation to generate an image that look like a desired person - at least to the neural network.&lt;&#x2F;p&gt;
&lt;p&gt;More in the &lt;a href=&quot;https:&#x2F;&#x2F;ambiso.github.io&#x2F;adversarial-machine-learning-challenge&#x2F;.&#x2F;faustctf-2018-jodlgang.pdf&quot;&gt;presentation&lt;&#x2F;a&gt; I made on this challenge.&lt;&#x2F;p&gt;
&lt;iframe src=&quot;.&#x2F;faustctf-2018-jodlgang.pdf&quot; style=&quot;width: 100%; aspect-ratio: 16&#x2F;9;&quot;&gt;&lt;&#x2F;iframe&gt;
</description>
      </item>
    </channel>
</rss>
